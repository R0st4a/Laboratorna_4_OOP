openapi: 3.0.0
info:
  version: 1.0.0
  title: 'Online Lections'
  description: 'An API that allows users to create Online Lections'
  termsOfService: http://Online_Lections.com/terms-of-use
  #contact:
  #  name: Rostyslav
  #  url: Online_Lections.com
  #  email: rost.stas3108@gmail.com
  #license:
  #  name: Online_Lections
  #  url: hrrp://lisense.foo.com
    
servers: 
  - url: http://dev.foo.com/v1
    description: Dev Server
  
  - url: http://prod.foo.com/v1
    description: Prod Server
tags:
  - name: Teacher
    description: User Teacher
  - name: Child
    description: User Child
  - name: Course

paths:
  /course:
    post:
      tags:
        - Course
      summary: Create a new Course in the database
      description: Create a new Course in the database
      requestBody:
        required: true
        content:
          application/json:
              schema:
                $ref: '#/components/schemas/course'
          application/xml:
              schema:
                $ref: '#/components/schemas/course'
                  
      responses:
        200:
          description: Succssfully crated a new Course
      
      security:
        - Online_Lection_auth:
            - 'Change:lection'
          
    get:
      tags:
        - Course
      summary: View all courses
      responses:
        200:
          description: Successful pull of Courses info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/courses'
            
      security:
        - Online_Lection_auth:
            - 'Change:lection'
          

      
  /Owner:
     post:
      tags:
        - Teacher
      summary: Create Owner
      description: This can only be done by the Teachers.
      operationId: createOwner
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created Owner object
        required: true
  
  /User:
    post:
      tags:
        - Child
      summary: Create User
      description: This can only be done by the User.
      operationId: createUser
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Child'
        description: Created User object
        required: true
    
    put:
      tags:
        - Course
      summary: Update an course
      parameters:
        - in: query
          name: id_course
          description: The ID of course
          schema:
            type: integer
            example: 20
        - in: query
          name: id_student
          description: The ID of student you want to add or deleat
          schema:
            type: integer
            example: 20
        - in: query
          name: dia
          description: Dia s studentom
          schema:
            type: string
            example: delete
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/permisions'
        '400':
          description: Invalid ID supplied
        '404':
          description: Lection not found
        '405':
          description: Validation exception
      security:
        - Online_Lection_auth:
            - 'Change:lection'
            
  
  /course/{id}:
    get:
      description: Information about Course
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of course
          schema:
            type: integer
            example: 20
      security:
        - Online_Lection_auth:
          - 'Change:lection'
          - 'read:lection'
      
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/course'
            application/xml:
              schema:
                $ref: '#/components/schemas/course'
    
    delete:
      tags:
        - Course
      summary: Delete cource
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 5
      responses:
        200:
          description: Successful deleted
      security:
        - Online_Lection_auth:
            - 'Change:lection'
  
  /user/login:
    get:
      tags:
        - User
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
  
  /user/collect_data:
    get:
      tags:
        - Collect data
      summary: Logs user into the system can collect data about courses
      parameters:
        - name: Fill id
          in: query
          schema:
            type: string
      responses:
        200:
          description: Full information about course
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/course'

components:
  schemas:
  
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 228
        firstName:
          type: string
          example: Medved
        lastName:
          type: string
          example: Kapatuch
        email:
          type: string
          example: uchilka@gmail.com
        password:
          type: string
          example: 88005553535
        status:
          type: string
          example: teacher
      
    Child:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 666
        firstName:
          type: string
          example: Losy
        lastName:
          type: string
          example: Losyash
        email:
          type: string
          example: child@gmail.com
        password:
          type: string
          example: 777
        status:
          type: string
          example: child
    
    courses:
      description: Array of courses info
      type: array
      items:
        $ref: '#/components/schemas/course'
    
    permisions:
      description: Information about course
      properties:
        id:
          type: integer
          example: 4
        id_of_Owner:
          type: string
          example: 228
        id_of_Child:
          type: array
          maxLength: 5
          example: 666 , 222, 111
    
    course:
      description: Model contain course info
      properties:
        id: 
          type: integer
          example: 4
                      
        course name:
          type: string
          example: Math
                    
        course title:
          type: string
          example: Learning basic Math
        
        id_of_Owner: 
          type: integer
          example: 228
        
          
  securitySchemes:
    Online_Lection_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http'
          scopes:
            'Change:lection': modify lections in your account
            'read:lection': read lections that was allowed